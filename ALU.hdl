/* 
 Chapter No. 2 – Project No.2 

 Programmer: Roman Lapshuk 

 Date Last Modified: February 4, 2015
*/
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    
    //zx use mux16 preset y[0..15] to zeros. If zx=1 output y wich is zero.
    Mux16(a=x,b=false,sel=zx,out=zxout);
    //nx negate x
    Not16(in=zxout,out=notx);
    Mux16(a=zxout,b=notx,sel=nx,out=nxout);

    //zy use mux16 preset x to zeros. If zx=0 output x wich is zero.
    Mux16(a=y,b=false,sel=zy,out=zyout);
    //ny negate y
    Not16(in=zyout,out=noty);
    Mux16(a=zyout,b=noty,sel=ny,out=nyout);

    //setting the addition & and outputs
    And16(a=nxout,b=nyout,out=xandy);
    Add16(a=nxout,b=nyout,out=xaddy);

    //inputing prepared outputs for and & add
    Mux16(a=xandy,b=xaddy,sel=f,out=fout);

    //negate for “no” flag.
    Not16(in=fout,out=negout);

    //applying “no” flag, splitting output on 2 parts so we can use Or8Way(Or16 was not
    //used per project requirments) 
    //+ taking the value of single 1st bit
    Mux16(a=fout,b=negout,sel=no,out=out,out[0..7]=part1,out[8..15]=part2,out[15]=iftrue);
    
    //checking if output is == 0
    Or8Way(in=part1, out=part1out);
    Or8Way(in=part2, out=part2out);
    Or(a=part1out, b=part2out, out=ifzero);

    //setting b to true so in case of a is zero zr will be set to 1
    Xor(a=ifzero,b=true,out=zr);
    
    //checking if output is negative. Only need to check the first bit if starts with 1
    //then the number is negative
    And(a=iftrue,b=true,out=ng);




    

    
}