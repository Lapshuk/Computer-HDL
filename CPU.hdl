/* 
 Chapter No. 5 â€“ Project No.5 

 Programmer: Roman Lapshuk 

 Date Last Modified: February 25, 2015

*/

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15],out=aInst);
    //checking if need to set Aregister
    //instruction[5] - destination
    Or(a=aInst,b=instruction[5],out=loadA);

    //checking what to load to aRegister output from ALU or instruction
    Mux16(a=outMD,b=instruction,sel=aInst,out=ain);

    ARegister(in=ain,load=loadA,out=outA,out[0..14]=addressM);

    //choosing where to read from A|M
    Mux16(a=outA,b=inM,sel=instruction[12],out=AM);
    
    ALU(x=outD,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],
        f=instruction[7],no=instruction[6],out=outMD,out=outM,zr=zr,ng=ng);
    
    //if it is a c-command and instruction[4] == 1 write into dRegister
    And16(a[0]=instruction[15],b[0]=instruction[4],a[1]=instruction[15],b[1]=instruction[3],out[0]=loadD,out[1]=writeM);
    DRegister(in=outMD,load=loadD,out=outD);

    /****** Jump logic last 3 bits of instruction responsible for jumps *****/

    Not16(in[0]=ng,in[1]=zr,out[0]=ps,out[1]=nz);

    //checking for jumps & checking for positive non zero value
    And16(a[0]=instruction[15],b[0]=instruction[2],a[1]=instruction[15],b[1]=instruction[1],

        a[2]=instruction[15],b[2]=instruction[0],a[3]=ps,b[3]=nz,out[0]=jmp0,out[1]=jmp1,out[2]=jmp2,out[3]=psnz);
    
    And16(a[0]=jmp0,b[0]=ng,a[1]=jmp1,b[1]=zr,a[2]=jmp2,b[2]=psnz,out[0]=load0,out[1]=load1,out[2]=load2);

    //checking if there is a load that will go to pc
    Or8Way(in[0]=load0,in[1]=load1,in[2]=load2,out=pcload);

    PC(in=outA,load=pcload,inc=true,reset=reset,out[0..14]=pc);

}