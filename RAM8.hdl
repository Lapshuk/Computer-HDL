/* 
 Chapter No. 2 â€“ Project No.3 

 Programmer: Roman Lapshuk 

 Date Last Modified: February 11, 2015

*/
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    //input the load bit in dmux so when it is 0 we read when 1 we write.
    //dmux outputs on 8 different registers, selector(address) chooses which register will get the load.
    DMux8Way(in=load,sel=address,a=load0,b=load1,c=load2,d=load3,e=load4,f=load5,g=load6,h=load7);

    Register(in=in,load=load0,out=regout0);
    Register(in=in,load=load1,out=regout1);
    Register(in=in,load=load2,out=regout2);
    Register(in=in,load=load3,out=regout3);
    Register(in=in,load=load4,out=regout4);
    Register(in=in,load=load5,out=regout5);
    Register(in=in,load=load6,out=regout6);
    Register(in=in,load=load7,out=regout7);

    //To choose which register to read from.
    Mux8Way16(a=regout0,b=regout1,c=regout2,d=regout3,e=regout4,f=regout5,g=regout6,h=regout7,sel=address,out=out);

}